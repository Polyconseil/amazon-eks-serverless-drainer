AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  eks-lambda-drainer
  
  SAM Template for eks-lambda-drainer

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30

Resources:
  MyFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./main.zip
      Handler: main
      Runtime: go1.x
      Policies:
        - AWSLambdaBasicExecutionRole # Managed Policy
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - ec2:DescribeInstances
                - ec2:DescribeTags
                - eks:DescribeCluster
              Resource: '*'
      # Events:
      #   CWE:
      #     Type: CloudWatchEvent
      #     Properties:
      #       Pattern:
      #         source:
      #           - aws.ec2
      #         detail-type: 
      #           - "EC2 Spot Instance Interruption Warning"
      #Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object

  EventRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: "Rule for EC2 Spot Termination handling"
      EventPattern: {
        "source": [
          "aws.ec2"
        ],
        "detail-type": [
          "EC2 Spot Instance Interruption Warning"
        ]
      }
      Name: !Sub "SpotTermination-${AWS::StackName}"
      State: ENABLED
      Targets:
        - 
          Arn: !GetAtt MyFunction.Arn
          Id:  !Sub "${AWS::StackName}-eks-lambda-drainer"

Outputs:
  MyFunction:
    Description: "Lambda function Arn"
    Value: !GetAtt MyFunction.Arn

  MyFunctionIamRole:
    Description: "Lambda function IAM role Arn"
    Value: !GetAtt MyFunctionRole.Arn